import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class AttractionDetailScreen extends StatefulWidget {
  final int id;

  const AttractionDetailScreen({super.key, required this.id});

  @override
  State<StatefulWidget> createState() {
    return _AttractionDetailScreenState();
  }
}

class _AttractionDetailScreenState extends State<AttractionDetailScreen> {
  Map<String, dynamic>? _attractionDetail;

  String getFoodEmoji(String category) {
    switch (category.toLowerCase()) {
      case 'grains':
        return 'üåæ';
      case 'vegetable':
        return 'ü•¶';
      case 'dairy':
        return 'üßÄ';
      case 'fruit':
        return 'üçé';
      case 'meat':
        return 'üçñ';
      case 'drink':
        return 'ü•§';
      default:
        return 'üçΩÔ∏è'; // ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    }
  }

  @override
  void initState() {
    super.initState();
    _fetchAttractionDetail();
  }

  Future<void> _fetchAttractionDetail() async {
  try {
    final response = await http.get(
      Uri.parse('https://my.api.mockaroo.com/food.json?key=9a646df0'),
    );

    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      print("Data from API: $data"); // ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö

      if (data is List && data.isNotEmpty) {
        setState(() {
          _attractionDetail = data.firstWhere((item) => item['id'] == widget.id, orElse: () => null);
        });
      } else {
        setState(() {
          _attractionDetail = {};
        });
      }
    } else {
      print("Failed to load data: ${response.statusCode}");
      setState(() {
        _attractionDetail = {};
      });
    }
  } catch (e) {
    print("Error: $e");
    setState(() {
      _attractionDetail = {};
    });
  }
}



  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£'),


      ),
      body: _attractionDetail == null
          ? const Center(child: CircularProgressIndicator())
          : _attractionDetail!.isEmpty
              ? const Center(child: Text('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'))
              : Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å URL ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
                      if (_attractionDetail!['image_url'] != null)
                        Image.network(
                          _attractionDetail!['image_url'],
                          height: 200,
                          width: double.infinity,
                          fit: BoxFit.cover,
                        )
                      else
                        /*Image.asset(
                          'assets/default_image.jpg', // ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
                          height: 200,
                          width: double.infinity,
                          fit: BoxFit.cover,
                        ),*/
                      const SizedBox(height: 16),
                      Text(
                        _attractionDetail!['food_name'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
                        style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ${_attractionDetail!['food_categoryname'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}',
                        style: const TextStyle(fontSize: 18),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${_attractionDetail!['Suitable For'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}',
                        style: const TextStyle(fontSize: 18),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        '‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà: ${_attractionDetail!['calories'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡∏Å‡∏¥‡πÇ‡∏•‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà',
                        style: const TextStyle(fontSize: 18),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        '‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô: ${_attractionDetail!['protein'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡∏Å‡∏£‡∏±‡∏°\n'
                        '‡πÑ‡∏Ç‡∏°‡∏±‡∏ô: ${_attractionDetail!['fat'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡∏Å‡∏£‡∏±‡∏°\n'
                        '‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï: ${_attractionDetail!['carbohydrates'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡∏Å‡∏£‡∏±‡∏°',
                        style: const TextStyle(fontSize: 18),
                      ),
                      const SizedBox(height: 16),
                      Text(
                        _attractionDetail!['Description'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢',
                        style: const TextStyle(fontSize: 16),
                      ),
                    ],
                  ),
                ),
    );
  }
}
